name: Weekly Subdomain Scan & Delta

on:
  schedule:
    - cron: '0 0 * * 1'   # every Monday 00:00 UTC
  workflow_dispatch: {}

permissions:
  contents: write
  issues: write

jobs:
  scan:
    runs-on: ubuntu-latest
    env:
      RESULTS_DIR: results
      TARGETS_FILE: targets.txt
      GITHUB_USER_NAME: github-actions[bot]
      GITHUB_USER_EMAIL: github-actions[bot]@users.noreply.github.com
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install tools (subfinder, assetfinder, httpx, nuclei)
        run: |
          export GOPATH=$HOME/go
          export PATH=$GOPATH/bin:$PATH
          go install -v github.com/tomnomnom/assetfinder@latest
          go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest
          go install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest
          assetfinder -h || true
          subfinder -version || true
          httpx -version || true
          nuclei -version || true

      - name: Prepare results folder
        run: |
          mkdir -p "$RESULTS_DIR"
          TIMESTAMP=$(date -u +"%Y%m%dT%H%M%SZ")
          echo "$TIMESTAMP" > "$RESULTS_DIR/last_run_timestamp.txt"
          echo "runstamp=$TIMESTAMP" >> $GITHUB_ENV

      - name: Validate targets file exists
        run: |
          if [ ! -f "$TARGETS_FILE" ]; then
            echo "ERROR: $TARGETS_FILE not found. Create a file named $TARGETS_FILE with one domain per line." >&2
            exit 1
          fi

      - name: Discover subdomains (subfinder + assetfinder)
        run: |
          mkdir -p "$RESULTS_DIR/$runstamp"
          > "$RESULTS_DIR/$runstamp/subs.txt"
          while read domain; do
            echo "[+] Running subfinder for $domain"
            subfinder -d "$domain" -silent >> "$RESULTS_DIR/$runstamp/subs.txt"
            echo "[+] Running assetfinder for $domain"
            assetfinder --subs-only "$domain" >> "$RESULTS_DIR/$runstamp/subs.txt"
          done < "$TARGETS_FILE"
          sort -u "$RESULTS_DIR/$runstamp/subs.txt" -o "$RESULTS_DIR/$runstamp/subs.txt"

      - name: Resolve & probe alive hosts (httpx)
        run: |
          cat "$RESULTS_DIR/$runstamp/subs.txt" | httpx -silent -status-code -title -threads 50 -o "$RESULTS_DIR/$runstamp/alive.txt"

      - name: Run nuclei (JSON output)
        run: |
          nuclei -l "$RESULTS_DIR/$runstamp/alive.txt" -json -o "$RESULTS_DIR/$runstamp/nuclei.jsonl" || true
          jq -s '.' "$RESULTS_DIR/$runstamp/nuclei.jsonl" > "$RESULTS_DIR/$runstamp/nuclei.json" || echo "[]" > "$RESULTS_DIR/$runstamp/nuclei.json"

      - name: Compare with previous results
        run: |
          PREV_ALIVE="$RESULTS_DIR/last_alive.txt"
          PREV_NUC="$RESULTS_DIR/last_nuclei.json"
          NEW_ALIVE="$RESULTS_DIR/$runstamp/alive.txt"
          NEW_NUC="$RESULTS_DIR/$runstamp/nuclei.json"

          touch "$PREV_ALIVE"
          echo "[]" > "$PREV_NUC" || true

          sort -u "$PREV_ALIVE" > "$RESULTS_DIR/prev_alive_sorted.txt"
          sort -u "$NEW_ALIVE" > "$RESULTS_DIR/new_alive_sorted.txt"
          comm -23 "$RESULTS_DIR/new_alive_sorted.txt" "$RESULTS_DIR/prev_alive_sorted.txt" > "$RESULTS_DIR/added_alive.txt"
          comm -13 "$RESULTS_DIR/new_alive_sorted.txt" "$RESULTS_DIR/prev_alive_sorted.txt" > "$RESULTS_DIR/removed_alive.txt"

          jq -r '.[] | "\(.template.id) \(.host) \(.info.severity // "")"' "$NEW_NUC" | sort -u > "$RESULTS_DIR/new_nuclei_parsed.txt"
          jq -r '.[] | "\(.template.id) \(.host) \(.info.severity // "")"' "$PREV_NUC" | sort -u > "$RESULTS_DIR/prev_nuclei_parsed.txt"
          comm -23 "$RESULTS_DIR/new_nuclei_parsed.txt" "$RESULTS_DIR/prev_nuclei_parsed.txt" > "$RESULTS_DIR/added_nuclei.txt"
          comm -13 "$RESULTS_DIR/new_nuclei_parsed.txt" "$RESULTS_DIR/prev_nuclei_parsed.txt" > "$RESULTS_DIR/removed_nuclei.txt"

      - name: Create GitHub Issue if high severity new finding
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = 'results/added_nuclei.txt';
            if (!fs.existsSync(path)) return;
            const content = fs.readFileSync(path, 'utf8').trim();
            if (!content) return;
            const lines = content.split(/\r?\n/);
            const interesting = lines.filter(l => /critical|high/i.test(l));
            if (!interesting.length) return;
            const body = `New HIGH/CRITICAL findings:\n\n\`\`\`\n${interesting.slice(0,50).join('\n')}\n\`\`\`\nRun: ${process.env.runstamp}`;
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Automated: HIGH/CRITICAL findings',
              body,
              labels: ['automated-scan','high-priority']
            });

      - name: Send Discord notification (if DISCORD_WEBHOOK_URL set)
        if: ${{ secrets.DISCORD_WEBHOOK_URL != '' }}
        run: |
          WEBHOOK="${{ secrets.DISCORD_WEBHOOK_URL }}"
          ADDED_ALIVE=$(cat "$RESULTS_DIR/added_alive.txt" || true)
          ADDED_NUC=$(head -n 30 "$RESULTS_DIR/added_nuclei.txt" || true)
          PAYLOAD="{\"content\": \"Weekly subdomain scan:\n**New Hosts:**\n$(echo \"$ADDED_ALIVE\" | sed -e ':a;N;$!ba;s/\n/\\n/g')\n\n**New Findings (Top 30):**\n$(echo \"$ADDED_NUC\" | sed -e ':a;N;$!ba;s/\n/\\n/g')\"}"
          curl -s -H "Content-Type: application/json" -X POST -d "$PAYLOAD" "$WEBHOOK" || true

      - name: Save new results and commit
        run: |
          cp "$RESULTS_DIR/$runstamp/alive.txt" "$RESULTS_DIR/last_alive.txt"
          cp "$RESULTS_DIR/$runstamp/nuclei.json" "$RESULTS_DIR/last_nuclei.json"
          git config user.name "${GITHUB_USER_NAME}"
          git config user.email "${GITHUB_USER_EMAIL}"
          git add "$RESULTS_DIR"
          git commit -m "Automated scan results: $runstamp" || echo "No changes"
          git push origin HEAD:${{ github.ref_name }} || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: subdomain-scan-${{ env.runstamp }}
          path: ${{ env.RESULTS_DIR }}/${{ env.runstamp }}
