name: Ghost Subdomain & Vulnerability Scanner

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain to scan'
        required: true
        default: 'example.com'
  schedule:
    - cron: '0 6 * * 1'  # Every Monday at 6 AM UTC

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install Tools
        run: |
          set -e

          # update & base packages
          sudo apt-get update
          sudo apt-get install -y jq unzip wget git build-essential ca-certificates

          # ensure Go bin in PATH (actions/setup-go must run before this)
          echo "PATH=$PATH:$HOME/go/bin" >> $GITHUB_ENV
          export PATH=$PATH:$HOME/go/bin

          # Install via go (will put binaries in $HOME/go/bin)
          go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
          go install -v github.com/tomnomnom/assetfinder@latest
          # Subzy: use maintained fork (works with `go install`)
          go install -v github.com/PentestPad/subzy@latest

          # Install Amass (binary release)
          wget -q https://github.com/OWASP/Amass/releases/latest/download/amass_linux_amd64.zip
          unzip -q amass_linux_amd64.zip
          sudo mv amass_linux_amd64/amass /usr/local/bin/
          sudo chmod +x /usr/local/bin/amass
          rm -rf amass_linux_amd64* amass_linux_amd64.zip

          # small verification (non-failing if a tool absent)
          echo "---- installed tools (versions / help snippets) ----"
          subfinder -version || subfinder -h | head -n 1 || true
          nuclei -version || nuclei -h | head -n 1 || true
          assetfinder -h | head -n 1 || true
          subzy -h | head -n 1 || true
          amass -version || true

      - name: Validate Secrets
        run: |
          if [ -z "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            echo "::error::DISCORD_WEBHOOK secret is not set"
            exit 1
          fi
          echo "DISCORD_WEBHOOK=${{ secrets.DISCORD_WEBHOOK }}" >> $GITHUB_ENV

      - name: Set Domain
        id: set_domain
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "DOMAIN=${{ github.event.inputs.domain }}" >> $GITHUB_ENV
          else
            echo "DOMAIN=example.com" >> $GITHUB_ENV
          fi

      - name: Notify Start
        run: |
          curl -X POST -H "Content-Type: application/json" -d '{
            "content": "üîç **Scan Started**\n**Domain:** ${{ env.DOMAIN }}\n**Trigger:** ${{ github.event_name }}\n**Tools:** Subfinder + Assetfinder + Amass + Nuclei + Subzy"
          }' "${{ env.DISCORD_WEBHOOK }}"

      - name: Run Subfinder
        run: |
          subfinder -d ${{ env.DOMAIN }} -silent -o subfinder-subs.txt
          echo "SUBFINDER_SUBS_FOUND=$(wc -l < subfinder-subs.txt)" >> $GITHUB_ENV

      - name: Run Assetfinder
        run: |
          assetfinder -subs-only ${{ env.DOMAIN }} > assetfinder-subs.txt
          echo "ASSETFINDER_SUBS_FOUND=$(wc -l < assetfinder-subs.txt)" >> $GITHUB_ENV

      - name: Run Amass
        run: |
          amass enum -d ${{ env.DOMAIN }} -o amass-subs.txt
          echo "AMASS_SUBS_FOUND=$(wc -l < amass-subs.txt)" >> $GITHUB_ENV

      - name: Combine All Subdomains
        run: |
          cat subfinder-subs.txt assetfinder-subs.txt amass-subs.txt | sort -u > subdomains.txt
          echo "TOTAL_SUBDOMAINS_FOUND=$(wc -l < subdomains.txt)" >> $GITHUB_ENV

      - name: Notify Subdomain Results
        run: |
          # Read subdomains content
          SUBDOMAINS_CONTENT=$(cat subdomains.txt)
          
          # Create message
          MESSAGE="‚úÖ **Subdomain Discovery Complete**\n**Domain:** ${{ env.DOMAIN }}\n**Subfinder Subdomains:** ${{ env.SUBFINDER_SUBS_FOUND }}\n**Assetfinder Subdomains:** ${{ env.ASSETFINDER_SUBS_FOUND }}\n**Amass Subdomains:** ${{ env.AMASS_SUBS_FOUND }}\n**Total Unique Subdomains:** ${{ env.TOTAL_SUBDOMAINS_FOUND }}\n\n\`\`\`\n$SUBDOMAINS_CONTENT\n\`\`\`"
          
          # Truncate if too long
          if [ ${#MESSAGE} -gt 1900 ]; then
            TRUNCATED=$(echo "$SUBDOMAINS_CONTENT" | head -c 1800)
            MESSAGE="‚úÖ **Subdomain Discovery Complete**\n**Domain:** ${{ env.DOMAIN }}\n**Subfinder Subdomains:** ${{ env.SUBFINDER_SUBS_FOUND }}\n**Assetfinder Subdomains:** ${{ env.ASSETFINDER_SUBS_FOUND }}\n**Amass Subdomains:** ${{ env.AMASS_SUBS_FOUND }}\n**Total Unique Subdomains:** ${{ env.TOTAL_SUBDOMAINS_FOUND }}\n\n\`\`\`\n$TRUNCATED... [truncated]\n\`\`\`"
          fi
          
          # Send to Discord
          curl -X POST -H "Content-Type: application/json" \
            -d "{\"content\": $(echo "$MESSAGE" | jq -Rs .)}" \
            "${{ env.DISCORD_WEBHOOK }}"

      - name: Run Nuclei
        run: |
          nuclei -l subdomains.txt -severity critical,high,medium -silent -o nuclei-results.txt
          echo "NUCLEI_VULNS_FOUND=$(wc -l < nuclei-results.txt)" >> $GITHUB_ENV

      - name: Run Subzy
        run: |
          subzy run --targets subdomains.txt --hide_fails --output subzy-results.txt
          echo "SUBZY_VULNS_FOUND=$(wc -l < subzy-results.txt)" >> $GITHUB_ENV

      - name: Notify Vulnerability Summary
        run: |
          TOTAL_VULNS=$((${{ env.NUCLEI_VULNS_FOUND }} + ${{ env.SUBZY_VULNS_FOUND }}))
          echo "TOTAL_VULNS_FOUND=$TOTAL_VULNS" >> $GITHUB_ENV
          
          if [ $TOTAL_VULNS -gt 0 ]; then
            curl -X POST -H "Content-Type: application/json" -d "{
              \"content\": \"üö® **Vulnerabilities Found!**\n**Domain:** ${{ env.DOMAIN }}\n**Nuclei Vulnerabilities:** ${{ env.NUCLEI_VULNS_FOUND }}\n**Subzy Vulnerabilities:** ${{ env.SUBZY_VULNS_FOUND }}\n**Total:** $TOTAL_VULNS\n\nSending each vulnerability as a separate message...\"
            }" "${{ env.DISCORD_WEBHOOK }}"
          else
            curl -X POST -H "Content-Type: application/json" -d '{
              "content": "‚úÖ **Scan Complete**\n**Domain:** ${{ env.DOMAIN }}\nNo critical/high/medium vulnerabilities found"
            }' "${{ env.DISCORD_WEBHOOK }}"
          fi

      - name: Send Nuclei Vulnerabilities
        if: env.NUCLEI_VULNS_FOUND > 0
        run: |
          # Read each line and send as separate message
          while IFS= read -r vuln; do
            # Extract vulnerability details from nuclei output
            VULN_NAME=$(echo "$vuln" | grep -oP '\[\K[^\]]+' | head -1)
            SEVERITY=$(echo "$vuln" | grep -oP '\]\[\K[^\]]+' | head -1)
            URL=$(echo "$vuln" | grep -oP 'http[^\s]+' | head -1)
            
            # Set default values if extraction fails
            if [ -z "$VULN_NAME" ]; then VULN_NAME="Unknown"; fi
            if [ -z "$SEVERITY" ]; then SEVERITY="Unknown"; fi
            
            # Create message for this vulnerability
            MESSAGE="üö® **Nuclei Vulnerability Found**\n**Domain:** ${{ env.DOMAIN }}\n**URL:** $URL\n**Vulnerability:** $VULN_NAME\n**Severity:** $SEVERITY\n\`\`\`\n$vuln\n\`\`\`"
            
            # Send to Discord
            curl -X POST -H "Content-Type: application/json" \
              -d "{\"content\": $(echo "$MESSAGE" | jq -Rs .)}" \
              "${{ env.DISCORD_WEBHOOK }}"
              
            # Small delay to avoid rate limiting
            sleep 1
          done < nuclei-results.txt

      - name: Send Subzy Vulnerabilities
        if: env.SUBZY_VULNS_FOUND > 0
        run: |
          # Read each line and send as separate message
          while IFS= read -r vuln; do
            # Extract subdomain from subzy output
            SUBDOMAIN=$(echo "$vuln" | awk '{print $1}')
            VULN_NAME="Subdomain Takeover"
            SEVERITY="High"
            
            # Create message for this vulnerability
            MESSAGE="üö® **Subzy Vulnerability Found**\n**Domain:** ${{ env.DOMAIN }}\n**Subdomain:** $SUBDOMAIN\n**Vulnerability:** $VULN_NAME\n**Severity:** $SEVERITY\n\`\`\`\n$vuln\n\`\`\`"
            
            # Send to Discord
            curl -X POST -H "Content-Type: application/json" \
              -d "{\"content\": $(echo "$MESSAGE" | jq -Rs .)}" \
              "${{ env.DISCORD_WEBHOOK }}"
              
            # Small delay to avoid rate limiting
            sleep 1
          done < subzy-results.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scan-results
          path: |
            subfinder-subs.txt
            assetfinder-subs.txt
            amass-subs.txt
            subdomains.txt
            nuclei-results.txt
            subzy-results.txt
