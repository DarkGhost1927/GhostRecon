name: Subdomain & Vulnerability Scanner

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain(s) to scan (space-separated)'
        required: true
        # القيمة الافتراضية الآن تأتي من السيكرت
        default: ${{ secrets.TARGET_DOMAIN }}
  schedule:
    # Every Monday at 6 AM UTC
    - cron: '0 6 * * 1'

jobs:
  # This job prepares the list of domains for the matrix
  setup:
    runs-on: ubuntu-latest
    outputs:
      # We will output a JSON array of domains
      domains: ${{ steps.set-domains.outputs.domains }}
    steps:
      - name: Prepare Domain List
        id: set-domains
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # For manual runs, use the input
            domains_string="${{ github.event.inputs.domain }}"
          else
            # For scheduled runs, use the repository secret
            domains_string="${{ secrets.TARGET_DOMAIN }}"
          fi

          # Add a check to ensure the secret/input is not empty
          if [ -z "$domains_string" ]; then
            echo "::error::Secret TARGET_DOMAIN is not set or is empty."
            exit 1
          fi

          # Convert the space-separated string into a JSON array for the matrix
          json_array=$(echo "$domains_string" | jq -R 'split(" ")' | jq -c .)
          echo "domains=$json_array" >> $GITHUB_OUTPUT

  # This job will run for EACH domain in the list prepared by the 'setup' job
  scan:
    # It needs the 'setup' job to finish first
    needs: setup
    runs-on: ubuntu-latest
    # This is the matrix strategy
    strategy:
      fail-fast: false # This ensures that if one domain scan fails, the others will continue
      matrix:
        # 'domain' will be populated from the JSON array output of the 'setup' job
        domain: ${{ fromJson(needs.setup.outputs.domains) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install Tools
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y jq unzip wget git build-essential ca-certificates
          echo "GOBIN=$HOME/go/bin" >> $GITHUB_ENV
          echo "PATH=$PATH:$HOME/go/bin" >> $GITHUB_ENV
          go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest || true
          go install -v github.com/tomnomnom/assetfinder@latest || true
          go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest || true

      - name: Validate Discord Secret
        run: |
          if [ -z "${{ secrets.DISCORD_GHOST }}" ]; then
            echo "::error::DISCORD_GHOST secret is not set."
            exit 1
          fi
          echo "DISCORD_WEBHOOK=${{ secrets.DISCORD_GHOST }}" >> $GITHUB_ENV

      - name: Notify Start for ${{ matrix.domain }}
        run: |
          curl -s -X POST -H "Content-Type: application/json" -d "{
            \"content\": \"🔍 **Scan Started for Domain:** `${{ matrix.domain }}`\n**Trigger:** `${{ github.event_name }}`\"
          }" "${{ env.DISCORD_WEBHOOK }}" || true
      
      # Renamed and combined the subdomain discovery steps for clarity
      - name: Run Subdomain Discovery for ${{ matrix.domain }}
        run: |
          # Use the domain from the matrix
          subfinder -d ${{ matrix.domain }} -silent -o subfinder-subs.txt || true
          assetfinder --subs-only ${{ matrix.domain }} > assetfinder-subs.txt || true
          
          # Combine results for this specific domain
          cat subfinder-subs.txt assetfinder-subs.txt | sort -u > subdomains.txt
          
          echo "SUBFINDER_SUBS_FOUND=$(wc -l < subfinder-subs.txt)" >> $GITHUB_ENV
          echo "ASSETFINDER_SUBS_FOUND=$(wc -l < assetfinder-subs.txt)" >> $GITHUB_ENV
          echo "TOTAL_SUBDOMAINS_FOUND=$(wc -l < subdomains.txt)" >> $GITHUB_ENV

      - name: Notify Subdomain Results for ${{ matrix.domain }}
        run: |
          SUBDOMAINS_CONTENT=$(head -n 20 subdomains.txt)
          MESSAGE="✅ **Subdomain Discovery Complete**\n**Domain:** ${{ matrix.domain }}\n**Subfinder:** ${{ env.SUBFINDER_SUBS_FOUND }}\n**Assetfinder:** ${{ env.ASSETFINDER_SUBS_FOUND }}\n**Total Unique:** ${{ env.TOTAL_SUBDOMAINS_FOUND }}\n\n**Sample Results:**\n\`\`\`\n$SUBDOMAINS_CONTENT\n\`\`\`"
          # Logic for truncating the message if it's too long for Discord
          if [ ${#MESSAGE} -gt 1950 ]; then
            MESSAGE="✅ **Subdomain Discovery Complete**\n**Domain:** ${{ matrix.domain }}\n**Total Unique:** ${{ env.TOTAL_SUBDOMAINS_FOUND }}\n(Result list truncated as it exceeds Discord's limit)"
          fi
          curl -s -X POST -H "Content-Type: application/json" -d "{\"content\": $(echo "$MESSAGE" | jq -Rs .)}" "${{ env.DISCORD_WEBHOOK }}" || true

      - name: Run Nuclei for ${{ matrix.domain }}
        run: |
          nuclei -l subdomains.txt -severity critical,high,medium -silent -o nuclei-results.txt || true
          [ -f nuclei-results.txt ] || touch nuclei-results.txt
          echo "NUCLEI_VULNS_FOUND=$(wc -l < nuclei-results.txt)" >> $GITHUB_ENV

      - name: Notify Vulnerability Summary for ${{ matrix.domain }}
        run: |
          if [ "${{ env.NUCLEI_VULNS_FOUND }}" -gt 0 ]; then
             MESSAGE="🚨 **Vulnerabilities Found!**\n**Domain:** ${{ matrix.domain }}\n**Total:** ${{ env.NUCLEI_VULNS_FOUND }}\n\nSending details..."
          else
             MESSAGE="✅ **Vulnerability Scan Complete**\n**Domain:** ${{ matrix.domain }}\nNo critical/high/medium vulnerabilities found."
          fi
          curl -s -X POST -H "Content-Type: application/json" -d "{\"content\": \"$MESSAGE\"}" "${{ env.DISCORD_WEBHOOK }}" || true

      - name: Send Nuclei Vulnerabilities for ${{ matrix.domain }}
        if: env.NUCLEI_VULNS_FOUND != '0'
        run: |
          while IFS= read -r vuln; do
             MESSAGE="🚨 **Nuclei Vulnerability Found**\n**Domain:** ${{ matrix.domain }}\n\`\`\`\n$vuln\n\`\`\`"
             curl -s -X POST -H "Content-Type: application/json" -d "{\"content\": $(echo "$MESSAGE" | jq -Rs .)}" "${{ env.DISCORD_WEBHOOK }}" || true
             sleep 1
          done < nuclei-results.txt

      - name: Upload Artifacts for ${{ matrix.domain }}
        uses: actions/upload-artifact@v4
        with:
          name: scan-results-${{ matrix.domain }}
          path: |
            subdomains.txt
            nuclei-results.txt

