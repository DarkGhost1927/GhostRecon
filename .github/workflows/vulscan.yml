name: Subdomain & Vulnerability Scanner

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain to scan'
        required: true
        default: 'example.com'
  schedule:
    - cron: '0 6 * * 1'  # Every Monday at 6 AM UTC

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install Tools
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y jq unzip wget git build-essential ca-certificates

          # ensure go bin in PATH for later steps
          echo "GOBIN=$HOME/go/bin" >> $GITHUB_ENV
          echo "PATH=$PATH:$HOME/go/bin" >> $GITHUB_ENV
          export GOBIN=$HOME/go/bin
          export PATH=$PATH:$HOME/go/bin

          # recommended go env flags
          export CGO_ENABLED=0
          export GOFLAGS="-mod=mod"

          # Install subfinder, assetfinder, nuclei
          go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest || true
          go install -v github.com/tomnomnom/assetfinder@latest || true
          go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest || true

          # quick availability check (non-fatal)
          echo "Installed tools availability:"
          which subfinder || true
          which assetfinder || true
          which nuclei || true

      - name: Validate Secrets
        run: |
          if [ -z "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            echo "::error::DISCORD_WEBHOOK secret is not set"
            exit 1
          fi
          echo "DISCORD_WEBHOOK=${{ secrets.DISCORD_WEBHOOK }}" >> $GITHUB_ENV

      - name: Set Domain
        id: set_domain
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "DOMAIN=${{ github.event.inputs.domain }}" >> $GITHUB_ENV
          else
            echo "DOMAIN=example.com" >> $GITHUB_ENV
          fi

      - name: Notify Start
        run: |
          curl -s -X POST -H "Content-Type: application/json" -d '{
            "content": "üîç **Scan Started**\n**Domain:** ${{ env.DOMAIN }}\n**Trigger:** ${{ github.event_name }}\n**Tools:** Subfinder + Assetfinder + Nuclei"
          }' "${{ env.DISCORD_WEBHOOK }}" || true

      - name: Run Subfinder
        run: |
          subfinder -d ${{ env.DOMAIN }} -silent -o subfinder-subs.txt || true
          [ -f subfinder-subs.txt ] || touch subfinder-subs.txt
          echo "SUBFINDER_SUBS_FOUND=$(wc -l < subfinder-subs.txt)" >> $GITHUB_ENV

      - name: Run Assetfinder
        run: |
          assetfinder -subs-only ${{ env.DOMAIN }} > assetfinder-subs.txt || true
          [ -f assetfinder-subs.txt ] || touch assetfinder-subs.txt
          echo "ASSETFINDER_SUBS_FOUND=$(wc -l < assetfinder-subs.txt)" >> $GITHUB_ENV

      - name: Combine All Subdomains
        run: |
          cat subfinder-subs.txt assetfinder-subs.txt | sort -u > subdomains.txt
          [ -f subdomains.txt ] || touch subdomains.txt
          echo "TOTAL_SUBDOMAINS_FOUND=$(wc -l < subdomains.txt)" >> $GITHUB_ENV

      - name: Notify Subdomain Results
        run: |
          SUBDOMAINS_CONTENT=$(cat subdomains.txt)
          MESSAGE="‚úÖ **Subdomain Discovery Complete**\n**Domain:** ${{ env.DOMAIN }}\n**Subfinder Subdomains:** ${{ env.SUBFINDER_SUBS_FOUND }}\n**Assetfinder Subdomains:** ${{ env.ASSETFINDER_SUBS_FOUND }}\n**Total Unique Subdomains:** ${{ env.TOTAL_SUBDOMAINS_FOUND }}\n\n\`\`\`\n$SUBDOMAINS_CONTENT\n\`\`\`"
          if [ ${#MESSAGE} -gt 1900 ]; then
            TRUNCATED=$(echo "$SUBDOMAINS_CONTENT" | head -c 1800)
            MESSAGE="‚úÖ **Subdomain Discovery Complete**\n**Domain:** ${{ env.DOMAIN }}\n**Subfinder Subdomains:** ${{ env.SUBFINDER_SUBS_FOUND }}\n**Assetfinder Subdomains:** ${{ env.ASSETFINDER_SUBS_FOUND }}\n**Total Unique Subdomains:** ${{ env.TOTAL_SUBDOMAINS_FOUND }}\n\n\`\`\`\n$TRUNCATED... [truncated]\n\`\`\`"
          fi
          curl -s -X POST -H "Content-Type: application/json" \
            -d "{\"content\": $(echo "$MESSAGE" | jq -Rs .)}" \
            "${{ env.DISCORD_WEBHOOK }}" || true

      - name: Run Nuclei
        run: |
          nuclei -l subdomains.txt -severity critical,high,medium -silent -o nuclei-results.txt || true
          [ -f nuclei-results.txt ] || touch nuclei-results.txt
          echo "NUCLEI_VULNS_FOUND=$(wc -l < nuclei-results.txt)" >> $GITHUB_ENV

      - name: Notify Vulnerability Summary
        run: |
          NUCLEI_VULNS_FOUND=${NUCLEI_VULNS_FOUND:-0}
          TOTAL_VULNS=$NUCLEI_VULNS_FOUND
          echo "TOTAL_VULNS_FOUND=$TOTAL_VULNS" >> $GITHUB_ENV

          if [ "$TOTAL_VULNS" -gt 0 ]; then
            curl -s -X POST -H "Content-Type: application/json" -d "{
              \"content\": \"üö® **Vulnerabilities Found!**\n**Domain:** ${{ env.DOMAIN }}\n**Nuclei Vulnerabilities:** $NUCLEI_VULNS_FOUND\n**Total:** $TOTAL_VULNS\n\nSending each vulnerability as a separate message...\"
            }" "${{ env.DISCORD_WEBHOOK }}" || true
          else
            curl -s -X POST -H "Content-Type: application/json" -d '{
              "content": "‚úÖ **Scan Complete**\n**Domain:** ${{ env.DOMAIN }}\nNo critical/high/medium vulnerabilities found"
            }' "${{ env.DISCORD_WEBHOOK }}" || true
          fi

      - name: Send Nuclei Vulnerabilities
        if: ${{ env.NUCLEI_VULNS_FOUND != '0' }}
        run: |
          while IFS= read -r vuln; do
            VULN_NAME=$(echo "$vuln" | grep -oP '\[\K[^\]]+' | head -1 || echo "Unknown")
            SEVERITY=$(echo "$vuln" | grep -oP '\]\[\K[^\]]+' | head -1 || echo "Unknown")
            URL=$(echo "$vuln" | grep -oP 'http[^\s]+' | head -1 || echo "")
            MESSAGE="üö® **Nuclei Vulnerability Found**\n**Domain:** ${{ env.DOMAIN }}\n**URL:** $URL\n**Vulnerability:** $VULN_NAME\n**Severity:** $SEVERITY\n\`\`\`\n$vuln\n\`\`\`"
            curl -s -X POST -H "Content-Type: application/json" \
              -d "{\"content\": $(echo "$MESSAGE" | jq -Rs .)}" \
              "${{ env.DISCORD_WEBHOOK }}" || true
            sleep 1
          done < nuclei-results.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scan-results
          path: |
            subfinder-subs.txt
            assetfinder-subs.txt
            subdomains.txt
            nuclei-results.txt
