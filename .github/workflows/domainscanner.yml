# .github/workflows/ghost-domain-scanner-v01.yml

name: ghost domain scanner v01

on:
  # Schedule the workflow to run every 3 days at midnight UTC.
  # It will use the default domain specified in the `workflow_dispatch` inputs.
  schedule:
    - cron: '0 0 */3 * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      target_domain:
        description: 'The target domain to scan (e.g., https://mydomain.com)'
        required: true
        default: 'https://example.com'

jobs:
  scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Nuclei
        uses: projectdiscovery/nuclei-action@main
        with:
          nuclei-version: 'latest'

      - name: Run Nuclei Scan
        id: nuclei-scan
        run: |
          # The domain is now taken from the workflow input.
          # For scheduled runs, it uses the 'default' value.
          # For manual runs, it uses the value you provide.
          nuclei -u "${{ github.event.inputs.target_domain }}" -json -o results.json -silent
        shell: bash

      - name: Process Report and Notify Discord
        run: |
          # Check if the results file exists and is not empty
          if [ -s results.json ]; then
            echo "Vulnerabilities found. Processing report..."
            
            # Count the number of vulnerabilities
            VULN_COUNT=$(wc -l < results.json)
            
            # Start building the Discord message using the dynamic domain
            FINAL_MESSAGE="**ðŸš¨ Ghost Domain Scanner Report for ${{ github.event.inputs.target_domain }}**\nFound **${VULN_COUNT}** vulnerabilities:\n"
            
            # Loop through each line in the JSON results file
            while IFS= read -r line; do
              # Extract details using jq
              NAME=$(echo "$line" | jq -r '.info.name')
              SEVERITY=$(echo "$line" | jq -r '.info.severity')
              URL=$(echo "$line" | jq -r '.matched-at')
              
              # Append vulnerability details to the message
              FINAL_MESSAGE+="\n- **${NAME}** (${SEVERITY}) at \`${URL}\`"
            done < results.json
            
          else
            echo "No vulnerabilities found."
            # Build the success message using the dynamic domain
            FINAL_MESSAGE="**âœ… Ghost Domain Scanner Report for ${{ github.event.inputs.target_domain }}**\nNo vulnerabilities found."
          fi
          
          # Construct the JSON payload for Discord using jq for safety
          PAYLOAD=$(jq -n --arg content "$FINAL_MESSAGE" '{content: $content}')
          
          # Send the notification to Discord
          curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" "${{ secrets.DISCORD_WEBHOOK_URL }}"
        shell: bash
